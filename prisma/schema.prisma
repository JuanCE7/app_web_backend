generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  Tester
  Administrator
}

model User {
  id          String      @id @default(uuid())
  status      Boolean     @default(true)
  firstName   String  
  lastName    String
  email       String      @unique
  password    String
  role        Roles       @default(Tester) 
  image       String?
  projects    Project[]   
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Project {
  id          String      @id @default(uuid())
  code        String      @unique
  name        String
  description String?
  image       String?
  creatorId   String       
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  useCases    UseCase[]    @relation("ProjectUseCases")  
  testCases   TestCase[]    @relation("ProjectTestCases")  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UseCase {
  id              String     @id @default(uuid())
  code            String     
  name            String
  description     String
  preconditions   String
  postconditions  String
  mainFlow        String      
  alternateFlows  String?    
  projectId       String
  project         Project    @relation("ProjectUseCases", fields: [projectId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model TestCase {
  id              String             @id @default(uuid())
  code            String            
  name            String             
  description     String             
  steps           String            
  inputData       String           
  expectedResult  String?           
  projectId       String
  project         Project             @relation("ProjectTestCases", fields: [projectId], references: [id], onDelete: Cascade) 
  explanations    Explanation[]     @relation("TestCaseExplanation") 
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model Explanation {
  id            String      @id @default(uuid())
  analyzedText  String      
  keywords      String   
  explanation   String  
  type          AnalysisType 
  testCaseId    String
  testCase      TestCase    @relation("TestCaseExplanation", fields: [testCaseId], references: [id], onDelete: Cascade) 
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum AnalysisType {
  Description
  Preconditions
  Steps
  InputData
  ExpectedResult
}
