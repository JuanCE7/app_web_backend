generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  User
  Admin
}

model User {
  id          String      @id @default(uuid())
  firstName   String  
  lastName    String
  email       String      @unique
  password    String
  role        Roles       @default(User) 
  projects    Project[]   // Relación uno a muchos con Proyecto (proyectos creados por el usuario)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Project {
  id          String      @id @default(uuid())
  projectCode String      @unique
  name        String
  description String?
  image       String?
  creatorId   String       // ID del creador del proyecto
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade) // Relación con el usuario creador
  useCases    UseCase[]    @relation("ProjectUseCases")   // Relación uno a muchos con CasoDeUso
  testCases   TestCase[]    @relation("ProjectTestCases")  // Relación uno a muchos con CasoDePrueba
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TestCase {
  id              String             @id @default(uuid()) // ID interno
  displayId       String             // ID de visualización
  name            String             // Nombre descriptivo basado en el caso de uso
  description     String             // Explicación del objetivo del caso de prueba
  steps           Step[]             @relation("TestCaseSteps") // Relación uno a muchos con pasos
  inputData       String[]           // Datos de entrada usados en la prueba (basado en entradas del caso de uso)
  expectedResult  String?            // Lo que se espera que el sistema devuelva o realice
  projectId       String
  project         Project             @relation("ProjectTestCases", fields: [projectId], references: [id], onDelete: Cascade) // Relación con el proyecto
  analysisSequence AnalysisSequence[] @relation("TestCaseAnalysisSequences") // Relación con la tabla de secuencia de análisis
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model UseCase {
  id              String     @id @default(uuid())
  displayId       String     @unique
  name            String
  description     String
  entries         String[]
  preconditions   String[]
  postconditions  String[]
  mainFlow        Flow[]     @relation("MainFlow") // Sin `onDelete: Cascade`
  alternateFlows  Flow[]     @relation("AlternateFlow") // Sin `onDelete: Cascade`
  projectId       String
  project         Project    @relation("ProjectUseCases", fields: [projectId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Flow {
  id                 String    @id @default(uuid())
  name               String
  steps              Step[]    @relation("FlowSteps") // Sin `onDelete: Cascade`
  useCaseMainId      String?
  useCaseAlternateId String?
  useCaseMain        UseCase?  @relation("MainFlow", fields: [useCaseMainId], references: [id], onDelete: Cascade) // Aquí es correcto
  useCaseAlternate   UseCase?  @relation("AlternateFlow", fields: [useCaseAlternateId], references: [id], onDelete: Cascade) // Aquí es correcto
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Step {
  id          String    @id @default(uuid())
  number      Int
  description String
  testCaseId  String?
  testCase    TestCase? @relation("TestCaseSteps", fields: [testCaseId], references: [id], onDelete: Cascade)
  flowId      String?
  flow        Flow?     @relation("FlowSteps", fields: [flowId], references: [id], onDelete: Cascade) // Aquí es correcto
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AnalysisSequence {
  id            String      @id @default(uuid())
  analyzedText  String      // Texto analizado en esta parte del caso de prueba
  keywords      String[]    // Palabras clave identificadas en el análisis
  explanation   String      // Explicación de cómo se interpreta el texto
  type          AnalysisType // Enum para indicar la parte que se está analizando (Description, Preconditions, etc.)
  testCaseId    String
  testCase      TestCase    @relation("TestCaseAnalysisSequences", fields: [testCaseId], references: [id], onDelete: Cascade) // Eliminación en cascada
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum AnalysisType {
  Description
  Preconditions
  Steps
  InputData
  ExpectedResult
}
