generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id            String  @id @default(uuid())
  firstName     String
  lastName      String
  imageEntity   String?
  user          User?
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  status        Boolean   @default(true)
  entityId      String    @unique
  entity        Entity    @relation(fields: [entityId], references: [id])
  roleId        String
  role          Role      @relation(fields: [roleId], references: [id])
  projects      ProjectMember[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Roles { 
  Tester 
  Administrator 
}

model Role {
  id    String @id @default(uuid())
  name  Roles @unique
  users User[]
}

enum ProjectRoles {
  Owner
  Editor
  Viewer
}

model Project {
  id          String      @id @default(uuid())
  code        String      @unique
  name        String
  description String?
  image       String?
  useCases    UseCase[]   @relation("ProjectUseCases")
  members     ProjectMember[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ProjectMember {
  id         String       @id @default(uuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId  String
  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role       ProjectRoles
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([userId, projectId])
}

model UseCase {
  id              String     @id @default(uuid())
  code            String     
  name            String
  description     String
  preconditions   String
  postconditions  String
  mainFlow        String      
  alternateFlows  String?    
  testCases       TestCase[] @relation("UseCaseTestCases")  
  projectId       String
  project         Project    @relation("ProjectUseCases", fields: [projectId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model TestCase {
  id              String      @id @default(uuid())
  code            String            
  name            String             
  description     String
  steps           String            
  inputData       String           
  expectedResult  String?           
  useCaseId       String
  useCase         UseCase     @relation("UseCaseTestCases", fields: [useCaseId], references: [id], onDelete: Cascade) 
  explanation     Explanation?@relation("TestCaseExplanation")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Explanation {
  id          String    @id @default(uuid())
  summary     String
  details     String
  testCaseId  String    @unique            
  testCase    TestCase  @relation("TestCaseExplanation", fields: [testCaseId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}