generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  Dev
  Admin
  Tester
}

model User {
  id          String      @id @default(uuid())
  firstName   String  
  lastName    String
  email       String @unique
  password    String
  role        Roles @default(Dev) 
  projects    Project[] // Relación uno a muchos con Proyecto (proyectos creados por el usuario)
  permissions Permission[] // Proyectos a los que tiene acceso con permisos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String      @id @default(uuid())
  projectCode String   @unique
  name        String
  description String?
  image       String?
  creatorId   String      // ID del creador del proyecto
  creator     User     @relation(fields: [creatorId], references: [id]) // Relación con el usuario creador
  useCases    UseCase[]     // Relación uno a muchos con CasoDeUso
  testCases   TestCase[]    // Relación uno a muchos con CasoDePrueba
  permissions Permission[]  // Usuarios que tienen acceso al proyecto con permisos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UseCase {
  id              String      @id @default(uuid()) // ID interno
  displayId       String   @unique // ID de visualización
  name            String   // Breve título que describe el caso de uso
  description     String   // Detalle del propósito del caso de uso y su comportamiento esperado
  entries         String[] // Datos de entrada que el sistema debe procesar
  preconditions   String[] // Condiciones que deben cumplirse antes de que se ejecute el caso de uso
  postconditions  String[] // Resultado esperado después de ejecutar el caso de uso
  mainFlow        String[] // Pasos clave que describe el flujo principal del caso de uso
  alternateFlows  String[] // Flujos alternativos que se desvían del flujo principal
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


model TestCase {
  id            String        @id @default(uuid()) // ID interno
  displayId     String     @unique // ID de visualización
  name          String     // Nombre descriptivo basado en el caso de uso
  description   String     // Explicación del objetivo del caso de prueba
  steps         Step[]     // Listado de pasos didácticos para obtener el caso de prueba
  inputData     String[]   // Datos de entrada usados en la prueba (basado en entradas del caso de uso)
  expectedResult String?   // Lo que se espera que el sistema devuelva o realice
  projectId     String
  project       Project    @relation(fields: [projectId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Step {
  id          String  @id @default(uuid())
  number      Int
  description String
  testCaseId  String
  testCase    TestCase @relation(fields: [testCaseId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Permission {
  id            String       @id @default(uuid())
  permissionType PermissionType
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  projectId     String
  project       Project   @relation(fields: [projectId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum TestCaseState {
  Pending
  Executed
}

enum PermissionType {
  Reading
  Writing
  Both
}
